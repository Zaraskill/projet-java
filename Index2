package projectClass;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.HashMap;

public class Index {
private final HashMap<String, HashMap<String, ArrayList<Integer>> > index;
	
	private Index() {
		index = new HashMap<String, HashMap<String, ArrayList<Integer>>>();
	}
	
	public static Index createIndex(Path file, Index index1, ArrayList<String> wordList) throws IOException {
		Path dossier = file.getFileName();
		String doss = dossier.toString();
		if (index1 == null) {
			index1 = new Index();
		}
		int i = 0;
		try (BufferedReader reader =Files.newBufferedReader(file, StandardCharsets.UTF_8)) {
			String line;
			while ((line = reader.readLine()) != null) {
				StringTokenizer st = new StringTokenizer(line);
				while (st.hasMoreTokens()) {
					String word = st.nextToken();
					String wordFinal = minusWord(word);
					if (wordList.contains(wordFinal)) {
						index1.updateIndex(index1, wordFinal, i, doss);
					}
					i+= word.length();
				}
			}
		}
		return index1;
	}
	
	private static String minusWord(String word) {
		String wordFinal ="";
		
		for (int j = 0; j < word.length(); j++) {
			char c = word.charAt(j);
			if ( c < 65 || (c > 90 && c < 97) || c > 122) {
				
			}
			else {
				if ( 65 <= c && c <= 90) {
					c+=32;
				}
				wordFinal = wordFinal+c;
			}
		}
		return wordFinal;
	}
	
	//On ajoute l'emplacement du mot dans l'index
	public void updateIndex(Index index, String word, int place, String dossier) {

		if (index.getIndex().containsKey(word)) {
			if (index.getIndex().get(word).containsKey(dossier)) {
				index.getIndex().get(word).get(dossier).add(place);
			}
			else {
				ArrayList<Integer> liste = new ArrayList<Integer>();
				liste.add(place);
				index.getIndex().get(word).put(dossier, liste);
			}
		}
		else {
			ArrayList<Integer> liste = new ArrayList<Integer>();
			liste.add(place);
			HashMap<String, ArrayList<Integer>> map = new HashMap<String, ArrayList<Integer>>();
			map.put(dossier, liste);
			index.getIndex().put(word, map);
		}
	}
	
	@Override
	public String toString() {
		String chaine = new String("");
		for (String i: index.keySet() ) {
			chaine = chaine+ i+" "+index.get(i).toString()+"\n";
		}
		return chaine;
	}
	
	public HashMap<String, HashMap<String, ArrayList<Integer>>> getIndex() {
		return index;
	}
	
	public static void main(String[] args) throws IOException {
		String os = System.getProperty("os.name");
		File fil = new File(args[0]);
		Path file;
		Index index = null;
		ArrayList<String> wordList = new ArrayList<String>();
		for (int b = 1 ; b < args.length; b++) {
			wordList.add(args[b]);
		}
		if (os == "Windows"){
			String path = fil.getAbsolutePath();
			File[] list = fil.listFiles();
			for (int a = 0; a <list.length; a++) {
				path = path+"\\"+list[a];
				file = Paths.get(path);
				index = Index.createIndex(file, index, wordList);
			}
		}
		else {
			String path = fil.getAbsolutePath();
			File[] list = fil.listFiles();
			for (int a = 0; a <list.length; a++) {
				path = path+"/"+list[a];
				file = Paths.get(path);
				index = Index.createIndex(file, index, wordList);
			}
		}
		System.out.println(index.toString());
	}

}
